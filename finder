using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.MSBuild;
using Microsoft.CodeAnalysis.Text;
using ClosedXML.Excel; // dotnet add package ClosedXML

// -----------------------------------------------------------------------------
// Underwriting Usage Scanner â€” v4
// - Accepts a list of project NAMES (one per line) representing the "Underwriting" solution folder.
// - Reports only usages from those projects to symbols defined in other projects in the solution.
// - Columns: ReferencedProject, File, Line, Method, CodeLine
// - Output formats: xlsx (multi-sheet, one sheet per UsingProject), csv (single sheet), md.
// - Exceptions: regex patterns matched against Referenced project name, assembly name, namespace,
//   symbol FQN, or definition path.
//
// Quick start (from repo root):
//   1) Create underwriting-projects.txt with the 17 project names (exact solution names).
//   2) (Optional) Create exceptions.txt with regex lines to ignore.
//   3) Ensure packages installed in this scanner project:
//        dotnet add package Microsoft.CodeAnalysis.MSBuild
//        dotnet add package Microsoft.Build.Locator
//        dotnet add package Microsoft.CodeAnalysis.CSharp.Workspaces
//        dotnet add package ClosedXML
//   4) Run:
//        dotnet run --project tools/UnderwritingUsageScanner -- \
//          --solution all.sln \
//          --underwriting-projects underwriting-projects.txt \
//          --ignore-file exceptions.txt \
//          --output underwriting-usages.xlsx \
//          --format xlsx
// -----------------------------------------------------------------------------

internal static class Program
{
    private sealed record UsageHit(
        string UsingProject,           // for grouping sheets (not a column in CSV/Excel)
        string ReferencedProject,
        string File,
        int Line,
        string Method,
        string CodeLine);

    private static async Task<int> Main(string[] args)
    {
        string solutionPath = GetArg(args, "--solution") ?? "all.sln";
        string underwritingProjectsFile = GetArg(args, "--underwriting-projects") ?? "underwriting-projects.txt";
        string ignoreFile = GetArg(args, "--ignore-file");
        string output = GetArg(args, "--output") ?? "underwriting-usages.xlsx";
        string format = (GetArg(args, "--format") ?? InferFormatFromOutput(output)).ToLowerInvariant(); // xlsx|csv|md

        solutionPath = Path.GetFullPath(solutionPath);
        if (!File.Exists(solutionPath))
        {
            Console.Error.WriteLine($"Solution not found: {solutionPath}");
            return 2;
        }

        var underwritingNames = LoadUnderwritingNames(underwritingProjectsFile);
        if (underwritingNames.Count == 0)
        {
            Console.Error.WriteLine("No underwriting projects provided. Put names in underwriting-projects.txt or pass --underwriting-projects.");
            return 2;
        }

        var ignoreMatchers = LoadIgnoreMatchers(ignoreFile);

        // Robust MSBuild registration: prefer Visual Studio instance, else latest .NET SDK
        RegisterMsBuild();

        using var workspace = MSBuildWorkspace.Create();
        workspace.WorkspaceFailed += (_, e) => Console.Error.WriteLine("[MSBuild] " + e.Diagnostic);

        Console.WriteLine($"Loading solution: {solutionPath}");
        var solution = await workspace.OpenSolutionAsync(solutionPath);

        var allProjects = solution.Projects.Where(p => !string.IsNullOrEmpty(p.FilePath)).ToList();
        var underwritingProjects = allProjects.Where(p => underwritingNames.Contains(p.Name)).ToList();
        if (underwritingProjects.Count == 0)
        {
            Console.Error.WriteLine("Underwriting project names did not match any projects in the solution.");
            Console.Error.WriteLine("Projects available:\n  - " + string.Join("\n  - ", allProjects.Select(p => p.Name).OrderBy(s => s)));
            return 2;
        }

        // Map assembly name -> project (for resolving definition project)
        var projByAssembly = allProjects
            .Where(p => !string.IsNullOrEmpty(p.AssemblyName))
            .GroupBy(p => p.AssemblyName!, StringComparer.OrdinalIgnoreCase)
            .ToDictionary(g => g.Key, g => g.First(), StringComparer.OrdinalIgnoreCase);

        var hits = new List<UsageHit>(capacity: 4096);

        foreach (var usingProject in underwritingProjects)
        {
            var compilation = await usingProject.GetCompilationAsync();
            if (compilation is null) continue;

            foreach (var doc in usingProject.Documents.Where(d => d.SourceCodeKind == SourceCodeKind.Regular && d.SupportsSyntaxTree))
            {
                var tree = await doc.GetSyntaxTreeAsync();
                if (tree is null) continue;
                var model = await doc.GetSemanticModelAsync();
                if (model is null) continue;

                var root = await tree.GetRootAsync();
                var text = await doc.GetTextAsync();

                var nodes = root.DescendantNodes().Where(n =>
                    n is Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax ||
                    n is Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax ||
                    n is Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax ||
                    n is Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ||
                    n is Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax);

                foreach (var node in nodes)
                {
                    var info = model.GetSymbolInfo(node);
                    var symbol = info.Symbol ?? info.CandidateSymbols.FirstOrDefault();
                    if (symbol is null) continue;
                    symbol = symbol.OriginalDefinition;

                    var asm = symbol.ContainingAssembly?.Name ?? string.Empty;
                    var defPath = GetDefinitionPath(symbol);
                    if (string.IsNullOrEmpty(defPath)) continue; // metadata-only (NuGet/BCL)

                    if (!projByAssembly.TryGetValue(asm, out var defProj)) continue; // unknown project
                    if (underwritingNames.Contains(defProj.Name)) continue; // stays inside underwriting

                    var ns = symbol.ContainingNamespace?.ToDisplayString() ?? string.Empty;
                    if (IsIgnored(ignoreMatchers, defProj.Name) ||
                        IsIgnored(ignoreMatchers, asm) ||
                        IsIgnored(ignoreMatchers, ns) ||
                        IsIgnored(ignoreMatchers, GetDisplay(symbol)) ||
                        IsIgnored(ignoreMatchers, defPath))
                        continue;

                    var linePos = tree.GetLineSpan(node.Span).StartLinePosition;
                    int line = linePos.Line + 1;
                    string codeLine = SafeGetLine(text, linePos.Line).Trim();
                    string method = GetEnclosingMember(model, node.SpanStart);

                    hits.Add(new UsageHit(
                        UsingProject: usingProject.Name,
                        ReferencedProject: defProj.Name,
                        File: doc.FilePath ?? string.Empty,
                        Line: line,
                        Method: method,
                        CodeLine: codeLine
                    ));
                }
            }
        }

        // Sort nicely (sheet, then file/line)
        hits = hits
            .OrderBy(h => h.UsingProject, StringComparer.OrdinalIgnoreCase)
            .ThenBy(h => h.ReferencedProject, StringComparer.OrdinalIgnoreCase)
            .ThenBy(h => h.File, StringComparer.OrdinalIgnoreCase)
            .ThenBy(h => h.Line)
            .ToList();

        Directory.CreateDirectory(Path.GetDirectoryName(Path.GetFullPath(output)) ?? ".");

        switch (format)
        {
            case "xlsx":
                WriteExcel(hits, output);
                Console.WriteLine($"Wrote {hits.Count} rows to workbook: {output}");
                break;
            case "csv":
                await File.WriteAllTextAsync(output, ToCsv(hits));
                Console.WriteLine($"Wrote {hits.Count} rows to {output}");
                break;
            case "md":
                await File.WriteAllTextAsync(output, ToMarkdown(hits));
                Console.WriteLine($"Wrote {hits.Count} rows to {output}");
                break;
            default:
                Console.Error.WriteLine($"Unknown format: {format}");
                return 2;
        }

        return 0;
    }

    // -------------------------- Excel output (multi-sheet) --------------------------
    private static void WriteExcel(List<UsageHit> hits, string xlsxPath)
    {
        using var wb = new XLWorkbook();
        foreach (var group in hits.GroupBy(h => h.UsingProject, StringComparer.OrdinalIgnoreCase))
        {
            var ws = wb.Worksheets.Add(SanitizeSheetName(group.Key));

            // headers (exactly the requested columns)
            ws.Cell(1, 1).Value = "ReferencedProject";
            ws.Cell(1, 2).Value = "File";
            ws.Cell(1, 3).Value = "Line";
            ws.Cell(1, 4).Value = "Method";
            ws.Cell(1, 5).Value = "CodeLine";
            ws.Range(1, 1, 1, 5).Style.Font.Bold = true;

            int r = 2;
            foreach (var h in group)
            {
                ws.Cell(r, 1).Value = h.ReferencedProject;
                ws.Cell(r, 2).Value = Rel(h.File);
                ws.Cell(r, 3).Value = h.Line;
                ws.Cell(r, 4).Value = h.Method;
                ws.Cell(r, 5).Value = h.CodeLine;
                r++;
            }

            ws.Columns().AdjustToContents();
            ws.SheetView.FreezeRows(1);
        }
        wb.SaveAs(xlsxPath);
    }

    private static string SanitizeSheetName(string raw)
    {
        var name = raw;
        foreach (var c in new[] { '\\', '/', '*', '[', ']', ':', '?' })
            name = name.Replace(c, ' ');
        if (name.Length > 31) name = name.Substring(0, 31);
        return string.IsNullOrWhiteSpace(name) ? "Sheet" : name;
    }

    // -------------------------- helpers --------------------------
    private static void RegisterMsBuild()
    {
        var vs = MSBuildLocator.QueryVisualStudioInstances().OrderByDescending(i => i.Version).FirstOrDefault();
        if (vs != null)
        {
            MSBuildLocator.RegisterInstance(vs);
            return;
        }
        var dotnetRoot = Environment.GetEnvironmentVariable("DOTNET_ROOT");
#if WINDOWS
        dotnetRoot ??= @"C:\\Program Files\\dotnet";
#else
        dotnetRoot ??= Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".dotnet");
#endif
        var sdkDir = Path.Combine(dotnetRoot!, "sdk");
        var latest = Directory.Exists(sdkDir)
            ? Directory.GetDirectories(sdkDir).OrderByDescending(Path.GetFileName).FirstOrDefault()
            : null;
        if (latest is null) throw new Exception("No .NET SDK found. Install .NET SDK or VS Build Tools.");
        MSBuildLocator.RegisterMSBuildPath(latest);
    }

    private static HashSet<string> LoadUnderwritingNames(string file)
    {
        var set = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrWhiteSpace(file) && File.Exists(file))
        {
            foreach (var raw in File.ReadAllLines(file))
            {
                var line = raw.Trim();
                if (line.Length == 0 || line.StartsWith("#")) continue;
                set.Add(line);
            }
        }
        return set;
    }

    private static List<Regex> LoadIgnoreMatchers(string? ignoreFile)
    {
        var list = new List<Regex>();
        if (string.IsNullOrWhiteSpace(ignoreFile) || !File.Exists(ignoreFile)) return list;
        foreach (var raw in File.ReadAllLines(ignoreFile))
        {
            var line = raw.Trim();
            if (line.Length == 0 || line.StartsWith("#")) continue;
            list.Add(new Regex(line, RegexOptions.IgnoreCase | RegexOptions.Compiled));
        }
        return list;
    }

    private static bool IsIgnored(List<Regex> matchers, string candidate)
        => !string.IsNullOrEmpty(candidate) && matchers.Any(rx => rx.IsMatch(candidate));

    private static string GetDefinitionPath(ISymbol symbol)
    {
        var loc = symbol.Locations.FirstOrDefault(l => l.IsInSource);
        return loc != null ? (loc.SourceTree?.FilePath ?? string.Empty) : string.Empty;
    }

    private static string GetDisplay(ISymbol s)
    {
        var format = new SymbolDisplayFormat(
            globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,
            memberOptions: SymbolDisplayMemberOptions.IncludeParameters | SymbolDisplayMemberOptions.IncludeContainingType,
            parameterOptions: SymbolDisplayParameterOptions.IncludeType | SymbolDisplayParameterOptions.IncludeName,
            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.ExpandNullable);
        return s.ToDisplayString(format);
    }

    private static string SafeGetLine(SourceText text, int zeroBasedLine)
        => (zeroBasedLine < 0 || zeroBasedLine >= text.Lines.Count) ? string.Empty : text.Lines[zeroBasedLine].ToString();

    private static string ToCsv(IEnumerable<UsageHit> hits)
    {
        var sb = new StringBuilder();
        sb.AppendLine("ReferencedProject,File,Line,Method,CodeLine");
        foreach (var h in hits)
        {
            sb.AppendLine(string.Join(',', new[]
            {
                Csv(h.ReferencedProject), Csv(Rel(h.File)), h.Line.ToString(), Csv(h.Method), Csv(h.CodeLine)
            }));
        }
        return sb.ToString();
    }

    private static string Csv(string s)
    {
        if (s is null) return string.Empty;
        if (s.Contains('"') || s.Contains(',') || s.Contains('\n'))
            return '"' + s.Replace("\"", "\"\"") + '"';
        return s;
    }

    private static string ToMarkdown(IEnumerable<UsageHit> hits)
    {
        var sb = new StringBuilder();
        sb.AppendLine("| Referenced Project | File | Line | Method | Code Line |");
        sb.AppendLine("|---|---|---:|---|---|");
        foreach (var h in hits)
        {
            sb.AppendLine($"| {Esc(h.ReferencedProject)} | {Esc(Rel(h.File))} | {h.Line} | {Esc(h.Method)} | {Esc(Trunc(h.CodeLine, 120))} |");
        }
        return sb.ToString();
    }

    private static string Rel(string path)
    {
        try { return Path.GetRelativePath(Directory.GetCurrentDirectory(), path); } catch { return path; }
    }

    private static string Trunc(string s, int max)
        => string.IsNullOrEmpty(s) || s.Length <= max ? s : s.Substring(0, max - 1) + "â€¦";

    private static string Esc(string s) => s.Replace("|", "\\|");

    private static string GetEnclosingMember(SemanticModel model, int position)
    {
        var symbol = model.GetEnclosingSymbol(position);
        if (symbol == null) return string.Empty;
        ISymbol cur = symbol;
        while (cur != null && cur is not IMethodSymbol && cur is not IPropertySymbol && cur is not IEventSymbol && cur is not IFieldSymbol)
            cur = cur.ContainingSymbol;
        if (cur == null) cur = symbol.ContainingType ?? symbol;

        var fmt = new SymbolDisplayFormat(
            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
            memberOptions: SymbolDisplayMemberOptions.IncludeParameters | SymbolDisplayMemberOptions.IncludeContainingType,
            parameterOptions: SymbolDisplayParameterOptions.IncludeType | SymbolDisplayParameterOptions.IncludeName);
        return cur.ToDisplayString(fmt);
    }
}
